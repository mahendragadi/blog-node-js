{
  "{\"assumptions\":{},\"sourceRoot\":\"/mnt/m/assignments/blog/app/controllers/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/mnt/m/assignments/blog\",\"filename\":\"/mnt/m/assignments/blog/app/controllers/userController.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/mnt/m/assignments/blog\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.16.0": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/mnt/m/assignments/blog/app/controllers/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/mnt/m/assignments/blog",
      "filename": "/mnt/m/assignments/blog/app/controllers/userController.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "/mnt/m/assignments/blog",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/mnt/m/assignments/blog/app/controllers/userController.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/mnt/m/assignments/blog/app/controllers/userController.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/mnt/m/assignments/blog/app/controllers/",
        "sourceFileName": "userController.js"
      }
    },
    "ast": null,
    "code": "const bcrypt = require('bcrypt');\n\nconst jwt = require('jsonwebtoken');\n\nconst User = require(\"../models/User\");\n\nconst userController = () => {\n  //const get = async (req,res)=>{\n  //    const id = req.params.id;\n  //   let userData = await User.findAll({where:{id}});\n  //    res.json({users:userData});\n  //}\n  const getAll = async (req, res) => {\n    let data = await User.findAll();\n    res.json({\n      users: data\n    });\n  };\n\n  const uniqUser = async (req, res) => {\n    let id = req.params.id;\n    let uniq = await User.findAll({\n      where: {\n        id\n      }\n    });\n    res.json({\n      uniq\n    });\n  };\n\n  const add = async (req, res) => {\n    let {\n      name,\n      email,\n      password\n    } = req.body;\n    let isUserExist = await User.count({\n      where: {\n        email\n      }\n    });\n\n    if (isUserExist > 0) {\n      res.json({\n        message: \"User alredy exits!\"\n      });\n    } else if (password.length < 6) {\n      res.json({\n        message: \"Password must be at least 6 characters\"\n      });\n    } else {\n      const hashedPassword = await bcrypt.hash(password, 10);\n      let uc = await User.create({\n        name,\n        email,\n        password\n      });\n      res.json({\n        id: uc.id,\n        name,\n        email,\n        hashedPassword\n      });\n    }\n  };\n\n  const remove = async (req, res) => {\n    let id = req.params.id;\n    await User.destroy({\n      where: {\n        id\n      }\n    });\n    res.json({\n      message: \"User delete successful\"\n    });\n  };\n\n  const update = async (req, res) => {\n    const {\n      name,\n      email\n    } = req.body;\n    const {\n      id\n    } = req.params;\n    await User.update({\n      name,\n      email\n    }, {\n      where: {\n        id\n      }\n    });\n    res.json({\n      message: \"user successfully updated\"\n    });\n  };\n\n  const userLogin = async (req, res) => {\n    const {\n      email,\n      password\n    } = req.body;\n    const userData = await User.findOne({\n      where: {\n        email\n      }\n    });\n\n    if (!userData) {\n      res.json({\n        message: \"Invalid user\"\n      });\n    } else {\n      //const isPasswordMatch = bcrypt.compare(password,udt.password ,function(err,result) {\n      //  if (result){\n      //    return true;\n      //}else{\n      //    return false;\n      // }\n      //});\n      const isPasswordMatch = await bcrypt.compare(password, userData.password);\n      console.log(isPasswordMatch);\n\n      if (isPasswordMatch === true) {\n        const payLoad = {\n          id: userData.id,\n          email: userData.email,\n          name: userData.name\n        };\n        const token = jwt.sign(payLoad, \"huwbegopwr89nbvjei90\");\n        res.json({\n          token\n        });\n      } else {\n        res.json({\n          message: \"Invalid password\"\n        });\n      }\n    }\n  };\n\n  return {\n    add,\n    getAll,\n    remove,\n    update,\n    uniqUser,\n    userLogin\n  };\n};\n\nmodule.exports = userController;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "userController.js"
      ],
      "names": [
        "bcrypt",
        "require",
        "jwt",
        "User",
        "userController",
        "getAll",
        "req",
        "res",
        "data",
        "findAll",
        "json",
        "users",
        "uniqUser",
        "id",
        "params",
        "uniq",
        "where",
        "add",
        "name",
        "email",
        "password",
        "body",
        "isUserExist",
        "count",
        "message",
        "length",
        "hashedPassword",
        "hash",
        "uc",
        "create",
        "remove",
        "destroy",
        "update",
        "userLogin",
        "userData",
        "findOne",
        "isPasswordMatch",
        "compare",
        "console",
        "log",
        "payLoad",
        "token",
        "sign",
        "module",
        "exports"
      ],
      "mappings": "AACA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAEA,MAAMC,GAAG,GAAGD,OAAO,CAAC,cAAD,CAAnB;;AAEA,MAAME,IAAI,GAAGF,OAAO,CAAC,gBAAD,CAApB;;AAGA,MAAMG,cAAc,GAAI,MAAI;AAExB;AACA;AACC;AACA;AACA;AAED,QAAMC,MAAM,GAAG,OAAOC,GAAP,EAAWC,GAAX,KAAiB;AAC5B,QAAIC,IAAI,GAAG,MAAML,IAAI,CAACM,OAAL,EAAjB;AACAF,IAAAA,GAAG,CAACG,IAAJ,CAAS;AAACC,MAAAA,KAAK,EAACH;AAAP,KAAT;AACH,GAHD;;AAKA,QAAMI,QAAQ,GAAG,OAAON,GAAP,EAAWC,GAAX,KAAiB;AAC9B,QAAIM,EAAE,GAAGP,GAAG,CAACQ,MAAJ,CAAWD,EAApB;AACA,QAAIE,IAAI,GAAG,MAAMZ,IAAI,CAACM,OAAL,CAAa;AAACO,MAAAA,KAAK,EAAC;AAACH,QAAAA;AAAD;AAAP,KAAb,CAAjB;AACAN,IAAAA,GAAG,CAACG,IAAJ,CAAS;AAACK,MAAAA;AAAD,KAAT;AAGH,GAND;;AASA,QAAME,GAAG,GAAG,OAAOX,GAAP,EAAWC,GAAX,KAAiB;AACzB,QAAI;AAACW,MAAAA,IAAD;AAAMC,MAAAA,KAAN;AAAYC,MAAAA;AAAZ,QAAwBd,GAAG,CAACe,IAAhC;AACA,QAAIC,WAAW,GAAG,MAAMnB,IAAI,CAACoB,KAAL,CAAW;AAACP,MAAAA,KAAK,EAAC;AAACG,QAAAA;AAAD;AAAP,KAAX,CAAxB;;AAEA,QAAIG,WAAW,GAAC,CAAhB,EAAkB;AACdf,MAAAA,GAAG,CAACG,IAAJ,CAAS;AAACc,QAAAA,OAAO,EAAC;AAAT,OAAT;AACH,KAFD,MAEM,IAAIJ,QAAQ,CAACK,MAAT,GAAkB,CAAtB,EAAwB;AAC1BlB,MAAAA,GAAG,CAACG,IAAJ,CAAS;AAACc,QAAAA,OAAO,EAAC;AAAT,OAAT;AACH,KAFK,MAED;AACD,YAAME,cAAc,GAAG,MAAM1B,MAAM,CAAC2B,IAAP,CAAYP,QAAZ,EAAsB,EAAtB,CAA7B;AACA,UAAIQ,EAAE,GAAG,MAAMzB,IAAI,CAAC0B,MAAL,CAAY;AAACX,QAAAA,IAAD;AAAMC,QAAAA,KAAN;AAAYC,QAAAA;AAAZ,OAAZ,CAAf;AACAb,MAAAA,GAAG,CAACG,IAAJ,CAAU;AAACG,QAAAA,EAAE,EAACe,EAAE,CAACf,EAAP;AAAUK,QAAAA,IAAV;AAAeC,QAAAA,KAAf;AAAqBO,QAAAA;AAArB,OAAV;AAEH;AACJ,GAdD;;AAkBA,QAAMI,MAAM,GAAG,OAAOxB,GAAP,EAAWC,GAAX,KAAiB;AAC5B,QAAIM,EAAE,GAAGP,GAAG,CAACQ,MAAJ,CAAWD,EAApB;AACA,UAAMV,IAAI,CAAC4B,OAAL,CAAa;AAACf,MAAAA,KAAK,EAAC;AAACH,QAAAA;AAAD;AAAP,KAAb,CAAN;AACAN,IAAAA,GAAG,CAACG,IAAJ,CAAS;AAACc,MAAAA,OAAO,EAAC;AAAT,KAAT;AACH,GAJD;;AAMA,QAAMQ,MAAM,GAAG,OAAO1B,GAAP,EAAWC,GAAX,KAAiB;AAC5B,UAAM;AAACW,MAAAA,IAAD;AAAMC,MAAAA;AAAN,QAAeb,GAAG,CAACe,IAAzB;AACA,UAAM;AAACR,MAAAA;AAAD,QAAOP,GAAG,CAACQ,MAAjB;AACA,UAAMX,IAAI,CAAC6B,MAAL,CAAY;AAACd,MAAAA,IAAD;AAAMC,MAAAA;AAAN,KAAZ,EAA0B;AAACH,MAAAA,KAAK,EAAC;AAACH,QAAAA;AAAD;AAAP,KAA1B,CAAN;AACAN,IAAAA,GAAG,CAACG,IAAJ,CAAS;AAACc,MAAAA,OAAO,EAAC;AAAT,KAAT;AAEH,GAND;;AAQA,QAAMS,SAAS,GAAG,OAAO3B,GAAP,EAAWC,GAAX,KAAiB;AAC/B,UAAM;AAACY,MAAAA,KAAD;AAAOC,MAAAA;AAAP,QAAmBd,GAAG,CAACe,IAA7B;AACA,UAAMa,QAAQ,GAAG,MAAM/B,IAAI,CAACgC,OAAL,CAAa;AAACnB,MAAAA,KAAK,EAAE;AAACG,QAAAA;AAAD;AAAR,KAAb,CAAvB;;AAEA,QAAI,CAACe,QAAL,EAAe;AAEX3B,MAAAA,GAAG,CAACG,IAAJ,CAAS;AAACc,QAAAA,OAAO,EAAC;AAAT,OAAT;AAEH,KAJD,MAIK;AAED;AACE;AACE;AACA;AACA;AACD;AACH;AAEA,YAAMY,eAAe,GAAG,MAAOpC,MAAM,CAACqC,OAAP,CAAejB,QAAf,EAAyBc,QAAQ,CAACd,QAAlC,CAA/B;AACAkB,MAAAA,OAAO,CAACC,GAAR,CAAYH,eAAZ;;AACA,UAAIA,eAAe,KAAK,IAAxB,EAA8B;AAC1B,cAAMI,OAAO,GAAG;AAAE3B,UAAAA,EAAE,EAACqB,QAAQ,CAACrB,EAAd;AAAiBM,UAAAA,KAAK,EAAEe,QAAQ,CAACf,KAAjC;AAAuCD,UAAAA,IAAI,EAAEgB,QAAQ,CAAChB;AAAtD,SAAhB;AACA,cAAMuB,KAAK,GAAGvC,GAAG,CAACwC,IAAJ,CAASF,OAAT,EAAkB,sBAAlB,CAAd;AACAjC,QAAAA,GAAG,CAACG,IAAJ,CAAS;AAAE+B,UAAAA;AAAF,SAAT;AACD,OAJH,MAIS;AAELlC,QAAAA,GAAG,CAACG,IAAJ,CAAS;AAACc,UAAAA,OAAO,EAAC;AAAT,SAAT;AACD;AACN;AACJ,GA7BD;;AAiCA,SAAQ;AAACP,IAAAA,GAAD;AAAKZ,IAAAA,MAAL;AAAYyB,IAAAA,MAAZ;AAAmBE,IAAAA,MAAnB;AAA0BpB,IAAAA,QAA1B;AAAmCqB,IAAAA;AAAnC,GAAR;AACH,CAxFD;;AA0FAU,MAAM,CAACC,OAAP,GAAiBxC,cAAjB",
      "sourceRoot": "/mnt/m/assignments/blog/app/controllers/",
      "sourcesContent": [
        "\nconst bcrypt = require('bcrypt');\n\nconst jwt = require('jsonwebtoken');\n\nconst User = require(\"../models/User\");\n\n\nconst userController =  ()=>{\n\n    //const get = async (req,res)=>{\n    //    const id = req.params.id;\n     //   let userData = await User.findAll({where:{id}});\n     //    res.json({users:userData});\n     //}\n\n    const getAll = async (req,res)=>{\n        let data = await User.findAll();\n        res.json({users:data})\n    }\n\n    const uniqUser = async (req,res)=>{\n        let id = req.params.id; \n        let uniq = await User.findAll({where:{id}});\n        res.json({uniq})\n\n\n    }\n\n\n    const add = async (req,res)=>{\n        let {name,email,password} = req.body;\n        let isUserExist = await User.count({where:{email}});\n\n        if (isUserExist>0){\n            res.json({message:\"User alredy exits!\"});\n        }else if (password.length < 6){\n            res.json({message:\"Password must be at least 6 characters\"});\n        }else{\n            const hashedPassword = await bcrypt.hash(password, 10);\n            let uc = await User.create({name,email,password});\n            res.json( {id:uc.id,name,email,hashedPassword});\n\n        }\n    }\n\n   \n\n    const remove = async (req,res)=>{\n        let id = req.params.id;\n        await User.destroy({where:{id}});\n        res.json({message:\"User delete successful\"});\n    };\n\n    const update = async (req,res)=>{\n        const {name,email} = req.body;\n        const {id} = req.params;\n        await User.update({name,email}, {where:{id}});\n        res.json({message:\"user successfully updated\"});\n\n    }\n\n    const userLogin = async (req,res)=>{\n        const {email,password} = req.body;\n        const userData = await User.findOne({where: {email}});\n      \n        if (!userData) {\n            \n            res.json({message:\"Invalid user\"});\n\n        }else{\n\n            //const isPasswordMatch = bcrypt.compare(password,udt.password ,function(err,result) {\n              //  if (result){\n                //    return true;\n                //}else{\n                //    return false;\n               // }\n            //});\n\n            const isPasswordMatch = await  bcrypt.compare(password, userData.password);\n            console.log(isPasswordMatch)\n            if (isPasswordMatch === true) {\n                const payLoad = { id:userData.id,email: userData.email,name: userData.name};\n                const token = jwt.sign(payLoad, \"huwbegopwr89nbvjei90\");\n                res.json({ token });\n              } else {\n                \n                res.json({message:\"Invalid password\"});\n              }\n        }\n    }\n\n    \n\n    return  {add,getAll,remove,update,uniqUser,userLogin};\n}\n\nmodule.exports = userController;"
      ]
    },
    "sourceType": "module",
    "mtime": 1638255235799
  },
  "{\"assumptions\":{},\"sourceRoot\":\"/mnt/m/assignments/blog/app/models/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/mnt/m/assignments/blog\",\"filename\":\"/mnt/m/assignments/blog/app/models/User.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/mnt/m/assignments/blog\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.16.0": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/mnt/m/assignments/blog/app/models/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/mnt/m/assignments/blog",
      "filename": "/mnt/m/assignments/blog/app/models/User.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "/mnt/m/assignments/blog",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/mnt/m/assignments/blog/app/models/User.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/mnt/m/assignments/blog/app/models/User.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/mnt/m/assignments/blog/app/models/",
        "sourceFileName": "User.js"
      }
    },
    "ast": null,
    "code": "var Sequelize = require('sequelize');\n\nconst sequelize = require('../../config/database/database');\n\nconst Post = require('./Post');\n\nconst tableName = 'users';\nconst User = sequelize.define('User', {\n  id: {\n    type: Sequelize.BIGINT,\n    primaryKey: true,\n    autoIncrement: true,\n    allowNull: true\n  },\n  name: Sequelize.STRING,\n  email: Sequelize.STRING,\n  password: Sequelize.STRING,\n  token: Sequelize.STRING,\n  status: Sequelize.TINYINT\n}, {\n  tableName\n});\nmodule.exports = User;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlVzZXIuanMiXSwibmFtZXMiOlsiU2VxdWVsaXplIiwicmVxdWlyZSIsInNlcXVlbGl6ZSIsIlBvc3QiLCJ0YWJsZU5hbWUiLCJVc2VyIiwiZGVmaW5lIiwiaWQiLCJ0eXBlIiwiQklHSU5UIiwicHJpbWFyeUtleSIsImF1dG9JbmNyZW1lbnQiLCJhbGxvd051bGwiLCJuYW1lIiwiU1RSSU5HIiwiZW1haWwiLCJwYXNzd29yZCIsInRva2VuIiwic3RhdHVzIiwiVElOWUlOVCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUtBLFNBQVMsR0FBR0MsT0FBTyxDQUFDLFdBQUQsQ0FBeEI7O0FBQ0EsTUFBTUMsU0FBUyxHQUFHRCxPQUFPLENBQUMsZ0NBQUQsQ0FBekI7O0FBQ0EsTUFBTUUsSUFBSSxHQUFHRixPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFFQSxNQUFNRyxTQUFTLEdBQUcsT0FBbEI7QUFDQSxNQUFNQyxJQUFJLEdBQUdILFNBQVMsQ0FBQ0ksTUFBVixDQUFpQixNQUFqQixFQUF3QjtBQUNqQ0MsRUFBQUEsRUFBRSxFQUFFO0FBQ0FDLElBQUFBLElBQUksRUFBRVIsU0FBUyxDQUFDUyxNQURoQjtBQUVBQyxJQUFBQSxVQUFVLEVBQUUsSUFGWjtBQUdBQyxJQUFBQSxhQUFhLEVBQUUsSUFIZjtBQUlBQyxJQUFBQSxTQUFTLEVBQUU7QUFKWCxHQUQ2QjtBQU9qQ0MsRUFBQUEsSUFBSSxFQUFFYixTQUFTLENBQUNjLE1BUGlCO0FBUWpDQyxFQUFBQSxLQUFLLEVBQUVmLFNBQVMsQ0FBQ2MsTUFSZ0I7QUFTakNFLEVBQUFBLFFBQVEsRUFBRWhCLFNBQVMsQ0FBQ2MsTUFUYTtBQVVqQ0csRUFBQUEsS0FBSyxFQUFFakIsU0FBUyxDQUFDYyxNQVZnQjtBQVdqQ0ksRUFBQUEsTUFBTSxFQUFFbEIsU0FBUyxDQUFDbUI7QUFYZSxDQUF4QixFQVlYO0FBQUNmLEVBQUFBO0FBQUQsQ0FaVyxDQUFiO0FBZUFnQixNQUFNLENBQUNDLE9BQVAsR0FBa0JoQixJQUFsQiIsInNvdXJjZVJvb3QiOiIvbW50L20vYXNzaWdubWVudHMvYmxvZy9hcHAvbW9kZWxzLyIsInNvdXJjZXNDb250ZW50IjpbInZhciAgU2VxdWVsaXplID0gcmVxdWlyZSgnc2VxdWVsaXplJyk7XG5jb25zdCBzZXF1ZWxpemUgPSByZXF1aXJlKCcuLi8uLi9jb25maWcvZGF0YWJhc2UvZGF0YWJhc2UnKTtcbmNvbnN0IFBvc3QgPSByZXF1aXJlKCcuL1Bvc3QnKTtcblxuY29uc3QgdGFibGVOYW1lID0gJ3VzZXJzJztcbmNvbnN0IFVzZXIgPSBzZXF1ZWxpemUuZGVmaW5lKCdVc2VyJyx7XG4gICAgaWQ6IHtcbiAgICAgICAgdHlwZTogU2VxdWVsaXplLkJJR0lOVCxcbiAgICAgICAgcHJpbWFyeUtleTogdHJ1ZSxcbiAgICAgICAgYXV0b0luY3JlbWVudDogdHJ1ZSxcbiAgICAgICAgYWxsb3dOdWxsOiB0cnVlXG4gICAgfSxcbiAgICBuYW1lOiBTZXF1ZWxpemUuU1RSSU5HLFxuICAgIGVtYWlsOiBTZXF1ZWxpemUuU1RSSU5HLFxuICAgIHBhc3N3b3JkOiBTZXF1ZWxpemUuU1RSSU5HLFxuICAgIHRva2VuOiBTZXF1ZWxpemUuU1RSSU5HLFxuICAgIHN0YXR1czogU2VxdWVsaXplLlRJTllJTlQsXG59LHt0YWJsZU5hbWV9KTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9ICBVc2VyO1xuIl19",
    "map": {
      "version": 3,
      "sources": [
        "User.js"
      ],
      "names": [
        "Sequelize",
        "require",
        "sequelize",
        "Post",
        "tableName",
        "User",
        "define",
        "id",
        "type",
        "BIGINT",
        "primaryKey",
        "autoIncrement",
        "allowNull",
        "name",
        "STRING",
        "email",
        "password",
        "token",
        "status",
        "TINYINT",
        "module",
        "exports"
      ],
      "mappings": "AAAA,IAAKA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,gCAAD,CAAzB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,QAAD,CAApB;;AAEA,MAAMG,SAAS,GAAG,OAAlB;AACA,MAAMC,IAAI,GAAGH,SAAS,CAACI,MAAV,CAAiB,MAAjB,EAAwB;AACjCC,EAAAA,EAAE,EAAE;AACAC,IAAAA,IAAI,EAAER,SAAS,CAACS,MADhB;AAEAC,IAAAA,UAAU,EAAE,IAFZ;AAGAC,IAAAA,aAAa,EAAE,IAHf;AAIAC,IAAAA,SAAS,EAAE;AAJX,GAD6B;AAOjCC,EAAAA,IAAI,EAAEb,SAAS,CAACc,MAPiB;AAQjCC,EAAAA,KAAK,EAAEf,SAAS,CAACc,MARgB;AASjCE,EAAAA,QAAQ,EAAEhB,SAAS,CAACc,MATa;AAUjCG,EAAAA,KAAK,EAAEjB,SAAS,CAACc,MAVgB;AAWjCI,EAAAA,MAAM,EAAElB,SAAS,CAACmB;AAXe,CAAxB,EAYX;AAACf,EAAAA;AAAD,CAZW,CAAb;AAeAgB,MAAM,CAACC,OAAP,GAAkBhB,IAAlB",
      "sourceRoot": "/mnt/m/assignments/blog/app/models/",
      "sourcesContent": [
        "var  Sequelize = require('sequelize');\nconst sequelize = require('../../config/database/database');\nconst Post = require('./Post');\n\nconst tableName = 'users';\nconst User = sequelize.define('User',{\n    id: {\n        type: Sequelize.BIGINT,\n        primaryKey: true,\n        autoIncrement: true,\n        allowNull: true\n    },\n    name: Sequelize.STRING,\n    email: Sequelize.STRING,\n    password: Sequelize.STRING,\n    token: Sequelize.STRING,\n    status: Sequelize.TINYINT,\n},{tableName});\n\n\nmodule.exports =  User;\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1638255769741
  },
  "{\"assumptions\":{},\"sourceRoot\":\"/mnt/m/assignments/blog/app/models/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/mnt/m/assignments/blog\",\"filename\":\"/mnt/m/assignments/blog/app/models/Post.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/mnt/m/assignments/blog\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.16.0": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/mnt/m/assignments/blog/app/models/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/mnt/m/assignments/blog",
      "filename": "/mnt/m/assignments/blog/app/models/Post.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "/mnt/m/assignments/blog",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/mnt/m/assignments/blog/app/models/Post.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/mnt/m/assignments/blog/app/models/Post.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/mnt/m/assignments/blog/app/models/",
        "sourceFileName": "Post.js"
      }
    },
    "ast": null,
    "code": "var Sequelize = require('sequelize');\n\nconst sequelize = require('../../config/database/database');\n\nconst User = require('./User');\n\nconst tableName = 'posts';\nconst Post = sequelize.define('Post', {\n  id: {\n    type: Sequelize.BIGINT,\n    primaryKey: true,\n    autoIncrement: true,\n    allowNull: true\n  },\n  title: Sequelize.STRING,\n  description: Sequelize.STRING,\n  user_id: Sequelize.BIGINT,\n  status: Sequelize.TINYINT\n}, {\n  tableName\n});\nPost.belongsTo(User, {\n  foreignKey: 'user_id'\n});\nmodule.exports = Post;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlBvc3QuanMiXSwibmFtZXMiOlsiU2VxdWVsaXplIiwicmVxdWlyZSIsInNlcXVlbGl6ZSIsIlVzZXIiLCJ0YWJsZU5hbWUiLCJQb3N0IiwiZGVmaW5lIiwiaWQiLCJ0eXBlIiwiQklHSU5UIiwicHJpbWFyeUtleSIsImF1dG9JbmNyZW1lbnQiLCJhbGxvd051bGwiLCJ0aXRsZSIsIlNUUklORyIsImRlc2NyaXB0aW9uIiwidXNlcl9pZCIsInN0YXR1cyIsIlRJTllJTlQiLCJiZWxvbmdzVG8iLCJmb3JlaWduS2V5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBS0EsU0FBUyxHQUFHQyxPQUFPLENBQUMsV0FBRCxDQUF4Qjs7QUFDQSxNQUFNQyxTQUFTLEdBQUdELE9BQU8sQ0FBQyxnQ0FBRCxDQUF6Qjs7QUFDQSxNQUFNRSxJQUFJLEdBQUdGLE9BQU8sQ0FBQyxRQUFELENBQXBCOztBQUVBLE1BQU1HLFNBQVMsR0FBRyxPQUFsQjtBQUNBLE1BQU1DLElBQUksR0FBR0gsU0FBUyxDQUFDSSxNQUFWLENBQWlCLE1BQWpCLEVBQXlCO0FBQ2xDQyxFQUFBQSxFQUFFLEVBQUM7QUFDQ0MsSUFBQUEsSUFBSSxFQUFFUixTQUFTLENBQUNTLE1BRGpCO0FBRUNDLElBQUFBLFVBQVUsRUFBRSxJQUZiO0FBR0NDLElBQUFBLGFBQWEsRUFBRSxJQUhoQjtBQUlDQyxJQUFBQSxTQUFTLEVBQUU7QUFKWixHQUQrQjtBQU9sQ0MsRUFBQUEsS0FBSyxFQUFFYixTQUFTLENBQUNjLE1BUGlCO0FBUWxDQyxFQUFBQSxXQUFXLEVBQUVmLFNBQVMsQ0FBQ2MsTUFSVztBQVNsQ0UsRUFBQUEsT0FBTyxFQUFFaEIsU0FBUyxDQUFDUyxNQVRlO0FBVWxDUSxFQUFBQSxNQUFNLEVBQUVqQixTQUFTLENBQUNrQjtBQVZnQixDQUF6QixFQVlYO0FBQUNkLEVBQUFBO0FBQUQsQ0FaVyxDQUFiO0FBZUFDLElBQUksQ0FBQ2MsU0FBTCxDQUFlaEIsSUFBZixFQUFvQjtBQUFDaUIsRUFBQUEsVUFBVSxFQUFFO0FBQWIsQ0FBcEI7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCakIsSUFBakIiLCJzb3VyY2VSb290IjoiL21udC9tL2Fzc2lnbm1lbnRzL2Jsb2cvYXBwL21vZGVscy8iLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgIFNlcXVlbGl6ZSA9IHJlcXVpcmUoJ3NlcXVlbGl6ZScpO1xuY29uc3Qgc2VxdWVsaXplID0gcmVxdWlyZSgnLi4vLi4vY29uZmlnL2RhdGFiYXNlL2RhdGFiYXNlJyk7XG5jb25zdCBVc2VyID0gcmVxdWlyZSgnLi9Vc2VyJyk7XG5cbmNvbnN0IHRhYmxlTmFtZSA9ICdwb3N0cydcbmNvbnN0IFBvc3QgPSBzZXF1ZWxpemUuZGVmaW5lKCdQb3N0Jywge1xuICAgIGlkOntcbiAgICAgICAgdHlwZTogU2VxdWVsaXplLkJJR0lOVCxcbiAgICAgICAgcHJpbWFyeUtleTogdHJ1ZSxcbiAgICAgICAgYXV0b0luY3JlbWVudDogdHJ1ZSxcbiAgICAgICAgYWxsb3dOdWxsOiB0cnVlXG4gICAgfSxcbiAgICB0aXRsZTogU2VxdWVsaXplLlNUUklORyxcbiAgICBkZXNjcmlwdGlvbjogU2VxdWVsaXplLlNUUklORyxcbiAgICB1c2VyX2lkOiBTZXF1ZWxpemUuQklHSU5ULFxuICAgIHN0YXR1czogU2VxdWVsaXplLlRJTllJTlQsXG5cbn0se3RhYmxlTmFtZX0pO1xuXG5cblBvc3QuYmVsb25nc1RvKFVzZXIse2ZvcmVpZ25LZXk6ICd1c2VyX2lkJ30pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBvc3QiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "Post.js"
      ],
      "names": [
        "Sequelize",
        "require",
        "sequelize",
        "User",
        "tableName",
        "Post",
        "define",
        "id",
        "type",
        "BIGINT",
        "primaryKey",
        "autoIncrement",
        "allowNull",
        "title",
        "STRING",
        "description",
        "user_id",
        "status",
        "TINYINT",
        "belongsTo",
        "foreignKey",
        "module",
        "exports"
      ],
      "mappings": "AAAA,IAAKA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,gCAAD,CAAzB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,QAAD,CAApB;;AAEA,MAAMG,SAAS,GAAG,OAAlB;AACA,MAAMC,IAAI,GAAGH,SAAS,CAACI,MAAV,CAAiB,MAAjB,EAAyB;AAClCC,EAAAA,EAAE,EAAC;AACCC,IAAAA,IAAI,EAAER,SAAS,CAACS,MADjB;AAECC,IAAAA,UAAU,EAAE,IAFb;AAGCC,IAAAA,aAAa,EAAE,IAHhB;AAICC,IAAAA,SAAS,EAAE;AAJZ,GAD+B;AAOlCC,EAAAA,KAAK,EAAEb,SAAS,CAACc,MAPiB;AAQlCC,EAAAA,WAAW,EAAEf,SAAS,CAACc,MARW;AASlCE,EAAAA,OAAO,EAAEhB,SAAS,CAACS,MATe;AAUlCQ,EAAAA,MAAM,EAAEjB,SAAS,CAACkB;AAVgB,CAAzB,EAYX;AAACd,EAAAA;AAAD,CAZW,CAAb;AAeAC,IAAI,CAACc,SAAL,CAAehB,IAAf,EAAoB;AAACiB,EAAAA,UAAU,EAAE;AAAb,CAApB;AAEAC,MAAM,CAACC,OAAP,GAAiBjB,IAAjB",
      "sourceRoot": "/mnt/m/assignments/blog/app/models/",
      "sourcesContent": [
        "var  Sequelize = require('sequelize');\nconst sequelize = require('../../config/database/database');\nconst User = require('./User');\n\nconst tableName = 'posts'\nconst Post = sequelize.define('Post', {\n    id:{\n        type: Sequelize.BIGINT,\n        primaryKey: true,\n        autoIncrement: true,\n        allowNull: true\n    },\n    title: Sequelize.STRING,\n    description: Sequelize.STRING,\n    user_id: Sequelize.BIGINT,\n    status: Sequelize.TINYINT,\n\n},{tableName});\n\n\nPost.belongsTo(User,{foreignKey: 'user_id'});\n\nmodule.exports = Post"
      ]
    },
    "sourceType": "module",
    "mtime": 1638255640096
  }
}